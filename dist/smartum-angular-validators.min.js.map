{"version":3,"file":"smartum-angular-validators.min.js","sources":["smartum-angular-validators.js"],"names":["root","factory","define","amd","angular","moment","this","module","directive","restrict","require","link","scope","elem","attrs","ngModel","$validators","businessId","modelValue","$isEmpty","match","checkSum","parseInt","mod","map","i","index","reduce","a","b","upped","toUpperCase","start","selectionStart","$setViewValue","$render","setSelectionRange","$parsers","unshift","ssn","res","isValid","lookup",10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,"m","hasOwnProperty","toString","iban","A","charCodeAt","Z","replace","substr","remainder","split","n","code","join","length","block","slice","elm","phone"],"mappings":"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","sourcesContent":["/**\n * smartum-angular-validators v0.6.0\n */\n\n(function(root, factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['angular', 'moment'], factory);\n    } else {\n        factory(root.angular, root.moment);\n    }\n}(this, function(angular, moment) {\n    'use strict';\n\n    var module = angular.module('smartumValidators', []);\n\n    module.directive('businessId', function() {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, elem, attrs, ngModel) {\n                ngModel.$validators.businessId = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue)) {\n                        return true;\n                    }\n\n                    if (!modelValue || modelValue.match(/^\\d{7}-\\d$/g) === null) {\n                        return false;\n                    }\n\n                    var checkSum = parseInt(modelValue[8], 10),\n                        mod = ([7, 9, 10, 5, 8, 4, 2].map(function(i, index) {\n                            return parseInt(modelValue[index], 10) * i;\n                        }).reduce(function(a, b) {\n                            return a + b;\n                        })) % 11;\n\n                    switch (mod) {\n                        case 0:\n                            return checkSum === 0;\n\n                        case 1:\n                            return false;\n                    }\n\n                    return 11 - mod === checkSum;\n                };\n            }\n        };\n    });\n\n    module.directive('ssn', function() {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, elem, attrs, ngModel) {\n                var upped = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue) || typeof modelValue !== 'string') {\n                        return '';\n                    }\n\n                    var upped = modelValue.toUpperCase(),\n                        start = elem[0].selectionStart;\n\n                    if (upped !== modelValue) {\n                        ngModel.$setViewValue(upped);\n                        ngModel.$render();\n\n                        elem[0].setSelectionRange(start, start);\n                    }\n\n                    return upped;\n                };\n\n                ngModel.$parsers.unshift(upped);\n\n                ngModel.$validators.ssn = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue)) {\n                        return true;\n                    }\n\n                    var res = modelValue.toUpperCase().match(\n                        /^(\\d{2})(\\d{2})(\\d{2})[-+a](\\d{3})([abcdefhjklmnprstuvwxy0-9])$/i\n                    );\n\n                    if ((res === null) || !moment(res[1] + '-' + res[2] + '-' + res[3], 'DD-MM-YY').isValid()) {\n                        return false;\n                    }\n\n                    var lookup = {\n                        10: 'A',\n                        11: 'B',\n                        12: 'C',\n                        13: 'D',\n                        14: 'E',\n                        15: 'F',\n                        16: 'H',\n                        17: 'J',\n                        18: 'K',\n                        19: 'L',\n                        20: 'M',\n                        21: 'N',\n                        22: 'P',\n                        23: 'R',\n                        24: 'S',\n                        25: 'T',\n                        26: 'U',\n                        27: 'V',\n                        28: 'W',\n                        29: 'X',\n                        30: 'Y'\n                    };\n\n                    var m = parseInt('' + res[1] + res[2] + res[3] + res[4], 10) % 31;\n\n                    if (m < 10) {\n                        return m === parseInt(res[5], 10);\n                    }\n\n                    return lookup.hasOwnProperty(m.toString()) && lookup[m] === res[5];\n                };\n\n                upped(scope[attrs.ngModel]);\n            }\n        };\n    });\n\n    module.directive('iban', function() {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, elem, attrs, ngModel) {\n                var upped = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue) || typeof modelValue !== 'string') {\n                        return '';\n                    }\n\n                    var upped = modelValue.toUpperCase(),\n                        start = elem[0].selectionStart;\n\n                    if (upped !== modelValue) {\n                        ngModel.$setViewValue(upped);\n                        ngModel.$render();\n\n                        elem[0].setSelectionRange(start, start);\n                    }\n\n                    return upped;\n                };\n\n                ngModel.$parsers.unshift(upped);\n\n                ngModel.$validators.iban = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue)) {\n                        return true;\n                    }\n\n                    var A = 'A'.charCodeAt(0),\n                        Z = 'Z'.charCodeAt(0),\n                        iban = modelValue.toUpperCase().replace(/\\s/g, '');\n\n                    iban = iban.substr(4) + iban.substr(0, 4);\n\n                    var remainder = iban.split('').map(function(n) {\n                        var code;\n                        code = n.charCodeAt(0);\n                        if (code >= A && code <= Z) {\n                            return code - A + 10;\n                        } else {\n                            return n;\n                        }\n                    }).join('');\n\n                    while (remainder.length > 2) {\n                        var block = remainder.slice(0, 9);\n\n                        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n                    }\n\n                    return parseInt(remainder, 10) % 97 === 1;\n                };\n\n                upped(scope[attrs.ngModel]);\n            }\n        };\n    });\n\n    module.directive('phone', function() {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function(scope, elm, attrs, ngModel) {\n                ngModel.$validators.phone = function(modelValue) {\n                    if (ngModel.$isEmpty(modelValue)) {\n                        return true;\n                    }\n\n                    return modelValue.match(/\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}$/g) !== null;\n                };\n            }\n        };\n    });\n\n}));\n"]}